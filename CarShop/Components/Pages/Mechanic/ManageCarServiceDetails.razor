@page "/manage-Car-Services-Details"
@using CarShop.Service
@using ClosedXML.Excel
@using Entity
@using Entity.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Radzen
@using Radzen.Blazor

@attribute [Authorize(Roles = "Mechanic")]

@inject NavigationManager navigationManager
@inject DialogService DialogService
@inject IUserService UserService
@inject IPersonService PersonService
@inject IServicesService SevicesSevice
@inject IMechanicService MechanicService
@inject IAuxiliaryListsService AuxiliaryService
@inject ICarService CarService
@inject IEmailSender emailSender
@rendermode InteractiveServer


<RadzenDataGrid TItem="ServicePlateViewModel" Data="@ServicesViewModels"
                AllowColumnResize="true" AllowAlternatingRows="false" PageSize="5" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="200px"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn TItem="ServicePlateViewModel" Property="Id" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="ServicePlateViewModel" Property="Plate" Title="Plate" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="ServicePlateViewModel" Property="EntranceDate" Title="Entrance Date" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="ServicePlateViewModel" Property="FinishedDate" Title="Finished Date" Width="160px" Frozen="true" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="ServicePlateViewModel" Property="TotalPrice" Title="Total Price" Width="160px" />

        <RadzenDataGridColumn TItem="ServicePlateViewModel" Title="Actions">
            <Template>
                @{
                    var currentService = (ServicePlateViewModel)@context; // Casting a UserPersonViewModel
                }
                <RadzenButton Icon="exit_to_app" Click="@(() => loadFinished(currentService))" ButtonStyle="ButtonStyle.Dark" />

            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
<div class="container mt-4">
    <div class="row">
        <div class="col-md-6" style=" padding: 20px;">
            <RadzenDataGrid TItem="Part" Data="@parts" AllowFiltering="true"
                            AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single" AllowColumnPicking="true">
                <Columns>
                    <RadzenDataGridColumn TItem="Part" Property="Id" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Part" Property="Name" Title="Name" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Part" Property="Price" Title="Price" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Part" Property="Quantity" Title="Quantity" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />

                </Columns>
            </RadzenDataGrid>

            <div style="margin-bottom: 10px;">
                <!-- Espacio entre el grid y el botón -->
                <RadzenButton Click="@loadAddPart" Text="Add New" Icon="add_circle" ButtonStyle="ButtonStyle.Success" Style="width: 100%;" />
            </div>
        </div>
        <div class="col-md-6 " style=" padding: 20px;">
            <RadzenDataGrid TItem="Labor" Data="@labors" AllowFiltering="true"
                            AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single" AllowColumnPicking="true">
                <Columns>
                    <RadzenDataGridColumn TItem="Labor" Property="Id" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Labor" Property="Description" Title="Description" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Labor" Property="HoursWorked" Title="HoursWorked" Frozen="true" Width="70px" TextAlign="TextAlign.Center" />


                </Columns>
            </RadzenDataGrid>

            <div style="margin-bottom: 10px;">
                <!-- Espacio entre el grid y el botón -->
                <RadzenButton Click="@loadAddLabor" Text="Add New" Icon="add_circle" ButtonStyle="ButtonStyle.Success" Style="width: 100%;" />
            </div>
        </div>
    </div>
</div>


<br />
<div class="mb-3 text-center">
    <span class="text-danger">@errorMessage</span>
</div>

<Modal @ref="modalAddPart">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    @title
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>


                <div class="row">
                    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                        <EditForm Model="@addPartModel" OnValidSubmit="AddPart" FormName="addPart">
                            <DataAnnotationsValidator />

                            <div class="mb-3 text-center flex-column">
                                <h3>@title</h3>
                            </div>



                            <div class="mb-3">
                                <label>Part Name</label>
                                <InputText @bind-Value="addPartModel.Name" class="form-control" placeholder="Part Name" />
                                <ValidationMessage For="@(() => addPartModel.Name)" />
                            </div>

                            <div class="mb-3">
                                <label>Price</label>
                                <InputNumber @bind-Value="addPartModel.Price" class="form-control" placeholder="Price" />
                                <ValidationMessage For="@(() => addPartModel.Price)" />
                            </div>
                            <div class="mb-3">
                                <label>Quantity</label>
                                <InputNumber @bind-Value="addPartModel.Quantity" class="form-control" placeholder="Quantity" />
                                <ValidationMessage For="@(() => addPartModel.Quantity)" />
                            </div>


                            <div class="mb-3 text-center">
                                <span class="text-danger">@errorMessage</span>
                            </div>

                            <!-- Botón de actualización -->
                            <div class="mb-3 d-grid gap-2">
                                <button type="submit" class="btn btn-outline-secondary">@title</button>
                            </div>
                        </EditForm>
                    </div>
                </div>



            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>

<Modal @ref="modalAddLabor">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    @title
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>


                <div class="row">
                    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                        <EditForm Model="@addLaborModel" OnValidSubmit="AddLabor" FormName="addPart">
                            <DataAnnotationsValidator />

                            <div class="mb-3 text-center flex-column">
                                <h3>@title</h3>
                            </div>

                            <div class="mb-3 ">
                                <p> Type of labor: @type</p>
                            </div>

                            <div class="mb-3">
                                <label>Part Name</label>
                                <InputText @bind-Value="addLaborModel.Description" class="form-control" placeholder="Part Name" />
                                <ValidationMessage For="@(() => addLaborModel.Description)" />
                            </div>

                            <div class="mb-3">
                                <label>Hours Worked</label>
                                <InputNumber @bind-Value="addLaborModel.HoursWorked" class="form-control" placeholder="Hours Worked" />
                                <ValidationMessage For="@(() => addLaborModel.HoursWorked)" />
                            </div>
                      
                            <div class="mb-3 text-center">
                                <span class="text-danger">@errorMessage</span>
                            </div>

                            <!-- Botón de actualización -->
                            <div class="mb-3 d-grid gap-2">
                                <button type="submit" class="btn btn-outline-secondary">@title</button>
                            </div>
                        </EditForm>
                    </div>
                </div>



            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>

<Modal @ref="modalAlertFinished">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    Finishing confirmation
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>
                Are you sure you want to mark this service as finished, once you do it you wouldn't be able to edit it again'
                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Danger" Outline Clicked="@Finish">Yes</Button>
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>

@code {
    private ServicePlateViewModel ServicesViewModel = new ServicePlateViewModel();
    private List<ServicePlateViewModel> ServicesViewModels = new List<ServicePlateViewModel>();
    private List<Part> parts = new List<Part>();
    private List<Labor> labors = new List<Labor>();

    private Part addPartModel = new Part();
    private Labor addLaborModel = new Labor();

    private Modal? modalAlertFinished = null!;
    private Modal? modalAddPart = null!;
    private Modal? modalAddLabor = null!;
    private string errorMessage, title, type;
    private int serviceId, mechanicId;
    private decimal Category;

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("MechanicId", out var mechanicIdValue) && int.TryParse(mechanicIdValue, out var mid))
        {
            mechanicId = mid;
        }
        await LoadServices(); // Cargar todos los usuarios al inicializar
        StateHasChanged();
    }

    private async Task LoadServices()
    {
        // Obtener el ID del query string
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("ServiceId", out var ServiceIdValue) && int.TryParse(ServiceIdValue, out var ServiceId))
        {
            serviceId = ServiceId;
            var service = await SevicesSevice.GetServicesByIdAsync(serviceId);
            ServicesViewModels = (await SevicesSevice.GetServiceWithCarPlateByServiceIdAsync(serviceId)).ToList();
            if (ServicesViewModel is null)
            {
                errorMessage = "There isn't any service related to this car";
            }
            else
            {

                parts = (await SevicesSevice.GetAllPartsByServiceAsync(serviceId)).ToList();
                labors = (await SevicesSevice.GetAllLaborsByServiceAsync(serviceId)).ToList();
                Category = await CarService.GetCategoryByCarIdAsync(service.Car_id);
            }
        }
        else
        {
            errorMessage = "There was an unexpected problem, please try later";
        }
        StateHasChanged();
    }

    private void cancel()
    {
        modalAddPart.Hide();
        modalAddLabor.Hide();
        modalAlertFinished.Hide();
    }

    private async void loadAddPart()
    {
        addPartModel = new Part();
        addPartModel.Service_id = serviceId;
        title = "Add Part";
        modalAddPart.Show();

    }

    private async void AddPart()
    {
        var result = await SevicesSevice.AddPartAsync(addPartModel);
        if (result)
        {

            await LoadServices();
            cancel();
        }
        else
        {
            errorMessage = "There was an unexpected problem while adding the part";
        }
    }

    private async void AddLabor()
    {
        var result = await SevicesSevice.AddLaborAsync(addLaborModel);
        if (result)
        {

            await LoadServices();
            cancel();
        }
        else
        {
            errorMessage = "There was an unexpected problem while adding the part";
        }
    }

    private async void loadAddLabor()
    {
        addLaborModel = new Labor();
        addLaborModel.Service_id = serviceId;
        addLaborModel.Mechanic_id = mechanicId;
        title = "Add Labor";
        var mechanic = await MechanicService.GetByIdAsync(mechanicId);
        if(mechanic != null)
        {
            var specialization = await AuxiliaryService.GetByIdAsync(mechanic.Specialization_id);
            if(specialization != null)
            {
                type = specialization.Specialization;
            }
        }

        modalAddLabor.Show();
    }

    private async void loadFinished(ServicePlateViewModel viewModel)
    {
        modalAlertFinished.Show();
    }

    private async void Finish()
    {
        var service = await SevicesSevice.GetServicesByIdAsync(serviceId);
        if(service != null)
        {
            var result = await SevicesSevice.FinishedServiceAsync(service);
            if (result)
            {
                var car = await CarService.GetCarByIdAsync(service.Car_id);
                var personId = await CarService.GetOwnerIdByCarIdAsync(service.Car_id);
                var person = await PersonService.GetByIdAsync(personId);
                var user = await UserService.GetUserByIdAsync(person.User_id);
                await ExecelExport(person, user.Email, car.Plate, service.FinishedDate.ToString());
                navigationManager.NavigateTo($"/manage-Car-Services");
            }
            else
            {
                errorMessage = "There was an unexpected problem while finishing this service";
            }
        }
        else
        {
            errorMessage = "There was an unexpected problem while finishing this service";
        }

    }

    private async Task ExecelExport(Person person, string email, string plate, string finishedDate)
    {
        using (var book = new XLWorkbook())
        {
            IXLWorksheet sheet = book.Worksheets.Add("Service");
            sheet.Cell(1, 1).Value = "Plate";
            sheet.Cell(1, 2).Value = "Entrance Date";
            sheet.Cell(1, 3).Value = "Finished Date";
            sheet.Cell(1, 4).Value = "Price per hour";
            sheet.Cell(1, 5).Value = "Total Price";

            for (int row = 0; row < ServicesViewModels.Count; row++)
            {
                sheet.Cell(row + 2, 1).Value = ServicesViewModels[row].Plate;
                sheet.Cell(row + 2, 2).Value = ServicesViewModels[row].EntranceDate.ToString();
                sheet.Cell(row + 2, 3).Value = ServicesViewModels[row].FinishedDate.ToString();
                sheet.Cell(row + 2, 4).Value = Category;
                sheet.Cell(row + 2, 5).Value = ServicesViewModels[row].TotalPrice;
            }

            sheet.Cell(4, 2).Value = "Parts";
            sheet.Cell(5, 1).Value = "Name";
            sheet.Cell(5, 2).Value = "Price";
            sheet.Cell(5, 3).Value = "Quantity";
            for (int row = 0; row < parts.Count; row++)
            {
                sheet.Cell(row + 6, 1).Value = parts[row].Name;
                sheet.Cell(row + 6, 2).Value = parts[row].Price;
                sheet.Cell(row + 6, 3).Value = parts[row].Quantity;

            }

            sheet.Cell(4, 5).Value = "labor";
            sheet.Cell(5, 5).Value = "Description";
            sheet.Cell(5, 6).Value = "Hours Worked";

            for (int row = 0; row < labors.Count; row++)
            {
                sheet.Cell(row + 6, 5).Value = labors[row].Description;
                sheet.Cell(row + 6, 6).Value = labors[row].HoursWorked;


            }

            using (var memory = new MemoryStream())
            {
                book.SaveAs(memory);
                memory.Position = 0;
                if (memory.CanRead)
                {
                    var excelName = string.Concat("Report_", plate, "_", finishedDate, ".xlsx");

                    // Llama al método SendEmail con los datos necesarios y el archivo adjunto
                    await emailSender.SendEmail(
                        attachmentData: memory.ToArray(),
                        attachmentName: excelName,
                        person, email, plate
                    );
                }
                
            }
        }
    }

}