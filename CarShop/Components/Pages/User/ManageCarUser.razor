@page "/car-management"
@using CarShop.Service
@using Entity
@using Entity.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using Radzen.Blazor
@using System.Security.Claims

@attribute [Authorize(Roles = "User")]

@inject NavigationManager navigationManager
@inject DialogService DialogService
@inject IUserService UserService
@inject IPersonService PersonService
@inject ICarService CarService
@inject IServicesService SevicesSevice
@inject IAuxiliaryListsService auxiliaryListsService
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer


<RadzenDataGrid TItem="CarsViewModel" Data="@carsViewModel" AllowFiltering="true"
                AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" ColumnWidth="200px" LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single" AllowColumnPicking="true">
    <Columns>
        <RadzenDataGridColumn TItem="CarsViewModel" Property="Id" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CarsViewModel" Property="Plate" Title="Plate" Frozen="true" Width="100px" />
        <RadzenDataGridColumn TItem="CarsViewModel" Property="Brand" Title="Brand" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CarsViewModel" Property="Model" Title="Model" Width="160px" Frozen="true" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CarsViewModel" Property="Year" Title="Year" Width="160px" />
        <RadzenDataGridColumn TItem="CarsViewModel" Property="CarCategory" Title="Car Category" Width="160px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="CarsViewModel" Title="Actions">
            <Template>
                @{
                    var currentCar = (CarsViewModel)@context; // Casting a UserPersonViewModel
                }
                <RadzenButton Icon="assignment_returned" Click="@(() => EditCar(currentCar))" ButtonStyle="ButtonStyle.Warning" />
                <RadzenButton Icon="delete" Click="@(() => DeleteCar(currentCar))" ButtonStyle="ButtonStyle.Danger" />
                <RadzenButton Icon="list" Click="@(() => ServiceSent(currentCar))" ButtonStyle="ButtonStyle.Dark" />
                <RadzenButton Icon="input" Click="@(() => SendService(currentCar))" ButtonStyle="ButtonStyle.Success" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<br />

<div style="margin-bottom: 10px;">
    <!-- Espacio entre el grid y el botón -->
    <RadzenButton Click="@loadAddCar" Text="Add New" Icon="add_circle" ButtonStyle="ButtonStyle.Success" Style="width: 100%;" />
</div>

<Modal @ref="modalAlertDelete">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    Delete confirmation
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>
                Are you sure you want to delete this Car from your car list?
                remember this won't delete the car itself, just your relation with it
            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Danger" Outline Clicked="@Delete">Delete</Button>
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>

<Modal @ref="modalAlertCarOwned">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    Alert
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>
                The car that you are trying to add is already registered in our system, do you want to add it as yours?
                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>
            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Danger" Outline Clicked="@changeOwner">Yes</Button>
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>

<Modal @ref="modalAddCar">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    @title
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>
                

                        <div class="row">
                            <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
                                <EditForm Model="@addCarModel" OnValidSubmit="AddCar" FormName="addCar">
                                    <DataAnnotationsValidator />

                                    <div class="mb-3 text-center flex-column">
                                        <h3>@title</h3>
                                    </div>

                                    <!-- Campos para actualizar información del usuario -->
                                    <div class="mb-3">
                                        <label>Plate</label>
                                <InputText @bind-Value="addCarModel.Plate" class="form-control" placeholder="Plate" disabled="@(isEditMode)" />
                                        <ValidationMessage For="@(() => addCarModel.Plate)" />
                                    </div>

                                    <div class="mb-3">
                                        <label>Brand</label>
                                        <InputText @bind-Value="addCarModel.Brand" class="form-control" placeholder="Brand" />
                                        <ValidationMessage For="@(() => addCarModel.Brand)" />
                                    </div>

                                    <div class="mb-3">
                                        <label>User Name</label>
                                        <InputText @bind-Value="addCarModel.Model" class="form-control" placeholder="Model" />
                                        <ValidationMessage For="@(() => addCarModel.Model)" />
                                    </div>
                                    <div class="mb-3">
                                        <label>Year</label>
                                        <InputNumber @bind-Value="addCarModel.Year" class="form-control" placeholder="Year" />
                                        <ValidationMessage For="@(() => addCarModel.Year)" />
                                    </div>

                                    <div class="mb-3">
                                        <label>Car Category</label>
                                        <select @bind="addCarModel.CarCategory_id" class="form-select">
                                            <option value="">Select a car category</option>
                                            @if (carCategories != null && carCategories.Count > 0)
                                            {
                                                @foreach (var category in carCategories)
                                                {
                                                    <option value="@category.Id">@category.Category</option>
                                                }
                                            }
                                        </select>
                                        <ValidationMessage For="@(() => addCarModel.CarCategory_id)" />
                                    </div>
                               


                             

                                 

                                    <div class="mb-3 text-center">
                                        <span class="text-danger">@errorMessage</span>
                                    </div>

                                    <!-- Botón de actualización -->
                                    <div class="mb-3 d-grid gap-2">
                                        <button type="submit" class="btn btn-outline-secondary">@title</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
           


            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>

<Modal @ref="modalServiceAlert">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    Alert
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>
                
                <div class="mb-3 text-center">
                    <span >@errorMessage</span>
                </div>
            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                <Button Color="Color.Danger" Outline Clicked="@ServiceSent">Yes</Button>
                <Button Color="Color.Warning" Outline Clicked="@cancel">Cancel</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>


<Modal @ref="modalAlert">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <div style="background-color:lightsteelblue; border-radius: 10px;">
            <ModalHeader style="    background-color:slateblue; color: white;font-size:small">
                <ModalTitle>
                    Alert
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <br>

                <div class="mb-3 text-center">
                    <span>@errorMessage</span>
                </div>
            </ModalBody>
            <ModalFooter style="background-color:lightsteelblue;">
                
                <Button Color="Color.Warning" Outline Clicked="@cancel">OK</Button>
            </ModalFooter>
        </div>
    </ModalContent>
</Modal>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<CarCategory>? carCategories;
    private List<CarsViewModel> carsViewModel = new List<CarsViewModel>();

    private Car addCarModel = new Car();
    private string title, errorMessage;

    private bool showComfrimDelete = false;

    private int deleteId;
    private int CarId;
    private int personId;

    private bool isEditMode = false;

    private Modal? modalAlertDelete = null!;
    private Modal? modalAddCar = null!;
    private Modal? modalAlertCarOwned = null!;
    private Modal? modalServiceAlert = null!;
    private Modal? modalAlert = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars(); // Cargar todos los usuarios al inicializar
    }

    private async Task LoadCars()
    {
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;
        var email = user.FindFirst(ClaimTypes.Email)?.Value;

        // Aquí puedes usar el email para cargar datos del usuario
        var userDetails = await UserService.GetUserByEmailAsync(email);
        if (userDetails != null)
        {
            var owner = await PersonService.GetByUserIdAsync(userDetails.Id);
            if(owner != null)
            {
                personId = owner.Id;
                carsViewModel = await CarService.GetAllCarsWithCategoriesAsync(owner.Id);
            }

        }
        StateHasChanged(); // Forzar actualización del estado si es necesario
    }

    private async void EditCar(CarsViewModel viewModel)
    {
        isEditMode = true;
        addCarModel = await CarService.GetCarByPlateAsync(viewModel.Plate);
        carCategories = (await auxiliaryListsService.GetAllCarCategories()).ToList();
        title = "Edit Car";
        modalAddCar.Show();

    }

    private void DeleteCar(CarsViewModel viewModel)
    {
        deleteId = viewModel.Id;
        modalAlertDelete.Show();
    }


    private async Task Delete()
    {
        await CarService.deletePersonCar(deleteId); // await UserService.DeleteUserByIdAsync(deleteId);
        await LoadCars();
        cancel();
        //await LoadCars(); // Recargar la lista después de eliminar



    }

    private void cancel()
    {

        modalAlertDelete.Hide();
        modalAddCar.Hide();
        modalAlertCarOwned.Hide();
        modalServiceAlert.Hide();
        modalAlert.Hide();
    }



    private async void loadAddCar()
    {
        isEditMode = false;
        addCarModel = new Car();
        addCarModel.Id = 0;
        carCategories = (await auxiliaryListsService.GetAllCarCategories()).ToList();
        title = "Add Car";
        modalAddCar.Show();


    }

    private async void AddCar()
    {
        var carAdded = await CarService.GetCarByPlateAsync(addCarModel.Plate);
        if(carAdded is null && isEditMode == false)
        {
            await CarService.AddCarWithOwner(personId, addCarModel);
            await LoadCars();
            cancel();

        }
        else
        {
            if(isEditMode == false)
            {
                errorMessage = "";
                modalAlertCarOwned.Show();
            }
            else
            {
                await CarService.updateCarAsync(addCarModel);
                await LoadCars();
                cancel();
            }
        }


    }
    private async void changeOwner()
    {
        var carAdded = await CarService.GetCarByPlateAsync(addCarModel.Plate);
        if(carAdded != null)
        {
            var result = await CarService.updatePersonCar(personId, carAdded.Id);
            if(result){
                await LoadCars();
                cancel();
            }
            else
            {
                errorMessage = "there was an unexpected problem, please try later";
                modalAlert.Show();
            }
        }
        else
        {
            errorMessage = "there was an unexpected problem, please try later"; 
            modalAlert.Show();
        }


    }

    private async void SendService(CarsViewModel viewModel)
    {
        var activeService = await SevicesSevice.GetActiveServiceAsync(viewModel.Id);
        if(activeService is null)
        {
            Service service = new Service();
            service.Car_id = viewModel.Id;
            service.TotalPrice = 0;
            CarId = service.Car_id;
            var result = await SevicesSevice.AddServiceAsync(service);
            if (result)
            {
                errorMessage = "The car was successfully sent to service, Do you want to see the details about this one or previous services? ";
                modalServiceAlert.Show();
            }
            else
            {
                errorMessage = "there was an unexpected problem, please try later";
                modalAlert.Show();
            }
        }
        else
        {
            CarId = activeService.Car_id;
            errorMessage = "The car that you are trying to send to service has already been sent, Do you want to see the details?";
            modalServiceAlert.Show();

        }
    }

    public void ServiceSent(CarsViewModel viewModel)
    {
        navigationManager.NavigateTo($"/Car-Services?CarId={viewModel.Id}");
    }

    public void ServiceSent()
    {
        navigationManager.NavigateTo($"/Car-Services?CarId={CarId}");
    }
}